@page "/register"
@using LoginManagmentWEB.Models
@using LoginManagmentWEB.Services
@rendermode InteractiveServer
@inject AuthService AuthService
@inject NavigationManager Navigation

<h3>Register</h3>

<EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Username</label>
        <InputText @bind-Value="registerModel.Username" placeholder="Username" />
        <ValidationMessage For="@(() => registerModel.Username)" />
    </div>

    <div>
        <label>Email</label>
        <InputText @bind-Value="registerModel.Email" placeholder="Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div>
        <label>Password</label>
        <InputText @bind-Value="registerModel.Password" placeholder="Password" type="password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <div>
        <label>Confirm Password</label>
        <InputText @bind-Value="registerModel.ConfirmPassword" placeholder="Confirm Password" type="password" />
        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
    </div>

    <div class="text-danger">@errorMessage</div>
    <button type="submit">Register</button>
</EditForm>

@code {
    private RegisterDto registerModel = new();
    private string errorMessage = string.Empty;

    private async Task HandleRegister()
    {
        errorMessage = string.Empty;

        var result = await AuthService.RegisterAsync(registerModel);

        if (result is not null && result.Success && result.Data is not null && !string.IsNullOrEmpty(result.Data.Token))
        {
            Navigation.NavigateTo("/user/homeuser");
        }
        else
        {
            errorMessage = $"Registration failed ({result?.StatusCode ?? 0}): {result?.Error ?? "No details returned"}";
            Console.WriteLine(errorMessage);
        }
    }
}

