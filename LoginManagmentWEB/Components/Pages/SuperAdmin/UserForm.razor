@page "/admin/users/create"
@rendermode InteractiveServer 
@using LoginManagmentWEB.Models
@using LoginManagmentWEB.Services
@using LoginManagmentWEB.Services.Auth
@using System.Net.Http.Headers
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject ITokenProvider TokenProvider
@inject IHttpClientFactory ClientFactory

<div class="admin-page">
    <div class="admin-card">
        <h3 class="home-title">Crear Usuario</h3>

        <EditForm Model="@formModel" OnValidSubmit="HandleSubmit" FormName="UserForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label class="form-label">Username</label>
                <div class="input-wrapper">
                    <InputText @bind-Value="formModel.Username" placeholder="Username" />
                </div>
                <div class="error-message show">
                    <ValidationMessage For="@(() => formModel.Username)" />
                </div>
            </div>

            <div class="form-group">
                <label class="form-label">Email</label>
                <div class="input-wrapper">
                    <InputText @bind-Value="formModel.Email" type="email" placeholder="Email" />
                </div>
                <div class="error-message show">
                    <ValidationMessage For="@(() => formModel.Email)" />
                </div>
            </div>

            <div class="form-group">
                <label class="form-label">Password</label>
                <div class="input-wrapper password-wrapper">
                    <InputText @bind-Value="formModel.Password" type="password" placeholder="Password" />
                </div>
                <div class="error-message show">
                    <ValidationMessage For="@(() => formModel.Password)" />
                </div>
            </div>

            <div class="form-group">
                <label class="form-label">Rol</label>
                <div class="input-wrapper">
                    <InputSelect @bind-Value="formModel.Role">
                        <option value="">-- Select role --</option>
                        <option value="Admin">Admin</option>
                        <option value="User">User</option>
                    </InputSelect>
                </div>
                <div class="error-message show">
                    <ValidationMessage For="@(() => formModel.Role)" />
                </div>
            </div>

            <div class="form-group">
                <label class="form-label">Activo</label>
                <div class="checkbox-wrapper">
                    <InputCheckbox @bind-Value="formModel.IsActive" />
                    <label class="checkbox-label">
                        <span class="checkbox-box"></span>
                        Usuario activo
                    </label>
                </div>
            </div>

            <div class="form-options">
                <button class="login-btn" type="submit">
                    <span class="btn-text">Guardar</span>
                </button>
                <button class="social-btn" @onclick="Cancel">Cancelar</button>
            </div>

            @if (!string.IsNullOrEmpty(operationError))
            {
                <div class="error-message show">@operationError</div>
            }
        </EditForm>
    </div>
</div>

@code {
    private CreateUserRequest formModel = new();
    private string operationError = string.Empty;

    private async Task HandleSubmit()
    {
        await TokenProvider.LoadTokenAsync();
        var token = TokenProvider.Token;

        if (string.IsNullOrEmpty(token))
        {
            operationError = "No se encontró token de autenticación.";
            await JS.InvokeVoidAsync("alert", operationError);
            return;
        }

        var client = ClientFactory.CreateClient();
        client.BaseAddress = new Uri("https://localhost:7162");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var userService = new UserService(client);
        var success = await userService.CreateAsync(formModel);

        if (success)
            Nav.NavigateTo("/admin/users");
        else
        {
            operationError = "Error al crear usuario.";
            await JS.InvokeVoidAsync("alert", operationError);
        }
    }

    private void Cancel() => Nav.NavigateTo("/admin/users");
}