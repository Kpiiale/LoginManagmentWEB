@page "/admin/users/delete/{Id:int}"
@inject ITokenProvider TokenProvider
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JS
@rendermode InteractiveServer 
@using LoginManagmentWEB.Services
@using LoginManagmentWEB.Services.Auth
@inject UserService UserService
@inject NavigationManager Nav

<div class="admin-page">
    <div class="admin-card">
        <h3 class="home-title">¿Eliminar usuario?</h3>
        <p class="home-subtitle">Esta acción no se puede deshacer.</p>

        <div class="form-options">
            <button class="login-btn" @onclick="DeleteUser">
                <span class="btn-text">Sí, eliminar</span>
            </button>
            <button class="social-btn" @onclick="Cancelar">Cancelar</button>
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    private async Task DeleteUser()
    {
        await TokenProvider.LoadTokenAsync();
        var token = TokenProvider.Token;

        if (string.IsNullOrEmpty(token))
        {
            await JS.InvokeVoidAsync("alert", "No se encontró token de autenticación.");
            return;
        }

        var client = ClientFactory.CreateClient();
        client.BaseAddress = new Uri("https://localhost:7162");
        client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var userService = new UserService(client);
        var success = await userService.DeleteAsync(Id);

        if (success)
        {
            Nav.NavigateTo("/admin/users");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "No se pudo eliminar el usuario.");
        }
    }

    private void Cancelar()
    {
        Nav.NavigateTo("/admin/users");
    }
}
