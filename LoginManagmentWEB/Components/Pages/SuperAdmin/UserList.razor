@page "/admin/users"
@using LoginManagmentWEB.Models
@using LoginManagmentWEB.Services
@inject UserService UserService
@inject NavigationManager Nav

<h3>Usuarios</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="CreateUser">Crear Usuario</button>
</div>

@if (users is null)
{
    <p>Cargando...</p>
}
else if (!users.Any())
{
    <p>No hay usuarios registrados.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Email</th>
                <th>Rol</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Email</td>
                    <td>@user.Role</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-2" @onclick="() => EditUser(user.Id)">Editar</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserDto>? users;

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAllAsync();
    }

    private void CreateUser() =>
        Nav.NavigateTo("/admin/users/create");

    private void EditUser(int id) =>
        Nav.NavigateTo($"/admin/users/edit/{id}");

    private void DeleteUser(int id) =>
        Nav.NavigateTo($"/admin/users/delete/{id}");
}
