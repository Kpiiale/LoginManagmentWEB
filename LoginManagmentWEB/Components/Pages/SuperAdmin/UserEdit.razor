@page "/admin/users/edit/{Id:int}"
@rendermode InteractiveServer
@using LoginManagmentWEB.Models
@using LoginManagmentWEB.Services
@using LoginManagmentWEB.Services.Auth
@using System.Net.Http.Headers
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject ITokenProvider TokenProvider
@inject IHttpClientFactory ClientFactory

<div class="admin-page">
    <div class="admin-card">
        <h3 class="home-title">Editar Usuario</h3>

        <EditForm Model="@formModel" OnValidSubmit="HandleSubmit" FormName="UserForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label class="form-label">Username</label>
                <h4 class="username-display">@formModel.Username</h4>
            </div>

            <div class="form-group">
                <label class="form-label">Email</label>
                <div class="input-wrapper">
                    <InputText @bind-Value="formModel.Email" type="email" placeholder="Email" />
                </div>
                <div class="error-message show">
                    <ValidationMessage For="@(() => formModel.Email)" />
                </div>
            </div>
            <div class="form-group">
                <label class="form-label">Contraseña</label>
                <div class="input-wrapper">
                    <InputText @bind-Value="formModel.Password" type="password" placeholder="Nueva contraseña" />
                </div>
                <div class="error-message show">
                    <ValidationMessage For="@(() => formModel.Password)" />
                </div>
            </div>
            <div class="form-group">
                <label class="form-label">Rol</label>
                <div class="input-wrapper">
                    <InputSelect @bind-Value="formModel.Role">
                        <option value="">-- Select role --</option>
                        <option value="Admin">Admin</option>
                        <option value="User">User</option>
                    </InputSelect>
                </div>
                <div class="error-message show">
                    <ValidationMessage For="@(() => formModel.Role)" />
                </div>
            </div>

            <div class="form-group">
                <label class="form-label">Activo</label>
                <div class="checkbox-wrapper">
                    <InputCheckbox @bind-Value="formModel.IsActive" />
                    <label class="checkbox-label">
                        <span class="checkbox-box"></span>
                        Usuario activo
                    </label>
                </div>
            </div>

            <div class="form-options">
                <button class="login-btn" type="submit">
                    <span class="btn-text">Guardar</span>
                </button>
                <button class="social-btn" @onclick="Cancel">Cancelar</button>
            </div>

            @if (!string.IsNullOrEmpty(operationError))
            {
                <div class="error-message show">@operationError</div>
            }
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    private CreateUserRequest formModel = new();
    private string operationError = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await TokenProvider.LoadTokenAsync();
            var token = TokenProvider.Token;

            if (string.IsNullOrEmpty(token))
            {
                operationError = "No se encontró token de autenticación.";
                StateHasChanged();
                return;
            }

            var client = ClientFactory.CreateClient();
            client.BaseAddress = new Uri("https://localhost:7162");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var userService = new UserService(client);
            var existing = await userService.GetByIdAsync(Id);

            if (existing is not null)
            {
                formModel = new CreateUserRequest
                {
                    Username = existing.Username,
                    Email = existing.Email,
                    Role = existing.Role,
                    IsActive = existing.IsActive,
                    Password = string.Empty
                };
            }
            else
            {
                operationError = "Usuario no encontrado.";
            }

            StateHasChanged();
        }
    }
    private async Task HandleSubmit()
    {
        await TokenProvider.LoadTokenAsync();

        var update = new UpdateUserRequest
        {
            Email = string.IsNullOrWhiteSpace(formModel.Email) ? null : formModel.Email,
            Role = string.IsNullOrWhiteSpace(formModel.Role) ? null : formModel.Role,
            UpdatedBy = TokenProvider.GetUsernameFromToken() ?? "autoupdate",
            IsActive = formModel.IsActive
        };

        var client = ClientFactory.CreateClient();
        client.BaseAddress = new Uri("https://localhost:7162");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenProvider.Token);

        var userService = new UserService(client);
        var success = await userService.UpdateAsync(Id, update);

        if (success)
            Nav.NavigateTo("/admin/users");
        else
        {
            operationError = "Error al actualizar usuario.";
            await JS.InvokeVoidAsync("alert", operationError);
        }
    }

    private void Cancel() => Nav.NavigateTo("/admin/users");
} 