@page "/admin/users/edit/{Id:int}"
@rendermode InteractiveServer
@using LoginManagmentWEB.Models
@using LoginManagmentWEB.Services
@using LoginManagmentWEB.Services.Auth
@using System.Net.Http.Headers
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject ITokenProvider TokenProvider
@inject IHttpClientFactory ClientFactory

<h3>Editar Usuario</h3>

<EditForm Model="@formModel" OnValidSubmit="HandleSubmit" FormName="UserForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Username</label>
        <InputText class="form-control" @bind-Value="formModel.Username" disabled />
    </div>

    <div class="mb-3">
        <label class="form-label">Email</label>
        <InputText class="form-control" @bind-Value="formModel.Email" type="email" />
        <ValidationMessage For="@(() => formModel.Email)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Rol</label>
        <InputSelect class="form-select" @bind-Value="formModel.Role">
            <option value="">-- Select role --</option>
            <option value="Admin">Admin</option>
            <option value="User">User</option>
        </InputSelect>
        <ValidationMessage For="@(() => formModel.Role)" />
    </div>

    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="formModel.IsActive" />
        <label class="form-check-label">Is Active</label>
    </div>

    <div class="mt-3">
        <button class="btn btn-primary me-2" type="submit">Guardar</button>
        <button class="btn btn-secondary" @onclick="Cancel">Cancelar</button>
    </div>

    @if (!string.IsNullOrEmpty(operationError))
    {
        <div class="text-danger mt-2">@operationError</div>
    }
</EditForm>

@code {
    [Parameter] public int Id { get; set; }

    private CreateUserRequest formModel = new();
    private string operationError = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await TokenProvider.LoadTokenAsync();
            var token = TokenProvider.Token;

            if (string.IsNullOrEmpty(token))
            {
                operationError = "No se encontró token de autenticación.";
                StateHasChanged();
                return;
            }

            var client = ClientFactory.CreateClient();
            client.BaseAddress = new Uri("https://localhost:7162");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var userService = new UserService(client);
            var existing = await userService.GetByIdAsync(Id);

            if (existing is not null)
            {
                formModel = new CreateUserRequest
                {
                    Username = existing.Username,
                    Email = existing.Email,
                    Role = existing.Role,
                    IsActive = existing.IsActive,
                    Password = string.Empty
                };
            }
            else
            {
                operationError = "Usuario no encontrado.";
            }

            StateHasChanged();
        }
    }
    private async Task HandleSubmit()
    {
        var update = new UpdateUserRequest
        {
            Email = string.IsNullOrWhiteSpace(formModel.Email) ? null : formModel.Email,
            Role = string.IsNullOrWhiteSpace(formModel.Role) ? null : formModel.Role,
            IsActive = formModel.IsActive
        };

        var client = ClientFactory.CreateClient();
        client.BaseAddress = new Uri("https://localhost:7162");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenProvider.Token);

        var userService = new UserService(client);
        var success = await userService.UpdateAsync(Id, update);

        if (success)
            Nav.NavigateTo("/admin/users");
        else
        {
            operationError = "Error al actualizar usuario.";
            await JS.InvokeVoidAsync("alert", operationError);
        }
    }

    private void Cancel() => Nav.NavigateTo("/admin/users");
}